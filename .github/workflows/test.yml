name: Test Suitennon:n  push:n    branches: [ main, develop ]n  pull_request:n    branches: [ main, develop ]nnenv:n  PYTHON_VERSION: '3.11'n  UV_VERSION: 'latest'nnjobs:n  unit-tests:n    runs-on: ubuntu-latestn    strategy:n      matrix:n        python-version: [3.11, 3.12]nn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Python ${{ matrix.python-version }}n      uses: actions/setup-python@v4n      with:n        python-version: ${{ matrix.python-version }}nn    - name: Install UVn      uses: astral-sh/setup-uv@v3n      with:n        version: ${{ env.UV_VERSION }}nn    - name: Cache dependenciesn      uses: actions/cache@v3n      with:n        path: .venvn        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}n        restore-keys: |n          ${{ runner.os }}-uv-nn    - name: Install dependenciesn      run: |n        uv sync --frozen --no-cache --all-extrasnn    - name: Run unit testsn      run: |n        uv run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missingnn    - name: Upload coverage to Codecovn      uses: codecov/codecov-action@v3n      with:n        file: ./coverage.xmln        flags: unittestsn        name: codecov-umbrellann  integration-tests:n    runs-on: ubuntu-latestn    needs: unit-testsn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Pythonn      uses: actions/setup-python@v4n      with:n        python-version: ${{ env.PYTHON_VERSION }}nn    - name: Install UVn      uses: astral-sh/setup-uv@v3n      with:n        version: ${{ env.UV_VERSION }}nn    - name: Install dependenciesn      run: |n        uv sync --frozen --no-cache --all-extrasnn    - name: Run integration testsn      run: |n        uv run pytest tests/integration/ -v --cov=app --cov-report=xml --cov-report=term-missingnn    - name: Upload integration coverage to Codecovn      uses: codecov/codecov-action@v3n      with:n        file: ./coverage.xmln        flags: integrationn        name: codecov-umbrellann  docker-tests:n    runs-on: ubuntu-latestn    needs: unit-testsn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Docker Buildxn      uses: docker/setup-buildx-action@v3nn    - name: Build Docker imagesn      run: |n        docker build -f Dockerfile.dev -t lit-music-mashup:dev .n        docker build -f Dockerfile.prod -t lit-music-mashup:prod .nn    - name: Test Docker imagesn      run: |n        # Test development imagen        docker run --rm lit-music-mashup:dev python -c "import app; print('Dev image OK')"n        n        # Test production imagen        docker run --rm lit-music-mashup:prod python -c "import app; print('Prod image OK')"nn    - name: Test Docker Compose configurationsn      run: |n        docker compose -f docker-compose.dev.yml confign        docker compose -f docker-compose.prod.yml confign        docker compose -f docker-compose.dev-with-ollama.yml confign        docker compose -f docker-compose.prod-with-ollama.yml confignn  security-tests:n    runs-on: ubuntu-latestn    needs: unit-testsn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Pythonn      uses: actions/setup-python@v4n      with:n        python-version: ${{ env.PYTHON_VERSION }}nn    - name: Install UVn      uses: astral-sh/setup-uv@v3n      with:n        version: ${{ env.UV_VERSION }}nn    - name: Install dependenciesn      run: |n        uv sync --frozen --no-cache --all-extrasnn    - name: Run security testsn      run: |n        # Run bandit security lintern        uv run bandit -r app/ -f json -o bandit-results.json || truen        n        # Run safety checkn        uv run safety check --json --output safety-results.json || truenn    - name: Upload security test resultsn      uses: actions/upload-artifact@v3n      if: always()n      with:n        name: security-test-resultsn        path: |n          bandit-results.jsonn          safety-results.json