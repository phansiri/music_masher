name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: 'latest'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv sync --frozen --no-cache --all-extras

    - name: Run unit tests
      run: |
        uv run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --frozen --no-cache --all-extras

    - name: Run integration tests
      run: |
        uv run pytest tests/integration/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload integration coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-umbrella

  docker-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker build -f Dockerfile.dev -t lit-music-mashup:dev .
        docker build -f Dockerfile.prod -t lit-music-mashup:prod .

    - name: Test Docker images
      run: |
        # Test development image
        docker run --rm lit-music-mashup:dev python -c "import app; print('Dev image OK')"
        
        # Test production image
        docker run --rm lit-music-mashup:prod python -c "import app; print('Prod image OK')"

    - name: Test Docker Compose configurations
      run: |
        docker compose -f docker-compose.dev.yml config
        docker compose -f docker-compose.prod.yml config
        docker compose -f docker-compose.dev-with-ollama.yml config
        docker compose -f docker-compose.prod-with-ollama.yml config

  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --frozen --no-cache --all-extras

    - name: Run security tests
      run: |
        # Run bandit security linter
        uv run bandit -r app/ -f json -o bandit-results.json || true
        
        # Run safety check
        uv run safety check --json --output safety-results.json || true

    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          bandit-results.json
          safety-results.json
