name: CI/CD Pipelinennon:n  push:n    branches: [ main, develop ]n  pull_request:n    branches: [ main, develop ]nnenv:n  PYTHON_VERSION: '3.11'n  UV_VERSION: 'latest'nnjobs:n  test:n    runs-on: ubuntu-latestn    strategy:n      matrix:n        python-version: [3.11, 3.12]nn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Python ${{ matrix.python-version }}n      uses: actions/setup-python@v4n      with:n        python-version: ${{ matrix.python-version }}nn    - name: Install UVn      uses: astral-sh/setup-uv@v3n      with:n        version: ${{ env.UV_VERSION }}nn    - name: Cache dependenciesn      uses: actions/cache@v3n      with:n        path: .venvn        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}n        restore-keys: |n          ${{ runner.os }}-uv-nn    - name: Install dependenciesn      run: |n        uv sync --frozen --no-cache --all-extrasnn    - name: Run lintingn      run: |n        uv run ruff check .n        uv run mypy app/nn    - name: Run testsn      run: |n        uv run pytest tests/ --cov=app --cov-report=xmlnn    - name: Upload coverage to Codecovn      uses: codecov/codecov-action@v3n      with:n        file: ./coverage.xmln        flags: unittestsn        name: codecov-umbrellann  docker-build:n    runs-on: ubuntu-latestn    needs: testn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Docker Buildxn      uses: docker/setup-buildx-action@v3nn    - name: Log in to Docker Hubn      uses: docker/login-action@v3n      with:n        username: ${{ secrets.DOCKERHUB_USERNAME }}n        password: ${{ secrets.DOCKERHUB_TOKEN }}nn    - name: Build and push Docker imagesn      uses: docker/build-push-action@v5n      with:n        context: .n        file: ./Dockerfile.prodn        push: truen        tags: |n          ${{ secrets.DOCKERHUB_USERNAME }}/lit-music-mashup:latestn          ${{ secrets.DOCKERHUB_USERNAME }}/lit-music-mashup:${{ github.sha }}n        cache-from: type=ghan        cache-to: type=gha,mode=maxnn  security-scan:n    runs-on: ubuntu-latestn    needs: testn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Run Trivy vulnerability scannern      uses: aquasecurity/trivy-action@mastern      with:n        scan-type: 'fs'n        scan-ref: '.'n        format: 'sarif'n        output: 'trivy-results.sarif'nn    - name: Upload Trivy scan results to GitHub Security tabn      uses: github/codeql-action/upload-sarif@v2n      if: always()n      with:n        sarif_file: 'trivy-results.sarif'nn  docker-compose-test:n    runs-on: ubuntu-latestn    needs: testn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Docker Buildxn      uses: docker/setup-buildx-action@v3nn    - name: Build Docker images for testingn      run: |n        docker build -f Dockerfile.dev -t lit-music-mashup:dev .n        docker build -f Dockerfile.prod -t lit-music-mashup:prod .nn    - name: Test Docker Compose configurationsn      run: |n        docker compose -f docker-compose.dev.yml confign        docker compose -f docker-compose.prod.yml confign        docker compose -f docker-compose.dev-with-ollama.yml confign        docker compose -f docker-compose.prod-with-ollama.yml confignn  deploy-staging:n    runs-on: ubuntu-latestn    needs: [test, docker-build, security-scan]n    if: github.ref == 'refs/heads/develop'n    environment: stagingn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Deploy to stagingn      run: |n        echo "Deploying to staging environment..."n        # Add staging deployment steps herenn  deploy-production:n    runs-on: ubuntu-latestn    needs: [test, docker-build, security-scan]n    if: github.ref == 'refs/heads/main'n    environment: productionn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Deploy to productionn      run: |n        echo "Deploying to production environment..."n        # Add production deployment steps here