name: Docker Security Scannnon:n  push:n    branches: [ main, develop ]n    paths:n      - 'Dockerfile*'n      - 'docker-compose*.yml'n      - '.dockerignore'n  pull_request:n    branches: [ main, develop ]n    paths:n      - 'Dockerfile*'n      - 'docker-compose*.yml'n      - '.dockerignore'n  schedule:n    - cron: '0 2 * * 1'  # Run weekly on Mondays at 2 AMnnjobs:n  docker-security:n    runs-on: ubuntu-latestn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Run Trivy vulnerability scanner on Dockerfilesn      uses: aquasecurity/trivy-action@mastern      with:n        scan-type: 'fs'n        scan-ref: '.'n        format: 'sarif'n        output: 'trivy-results.sarif'n        severity: 'CRITICAL,HIGH'nn    - name: Upload Trivy scan results to GitHub Security tabn      uses: github/codeql-action/upload-sarif@v2n      if: always()n      with:n        sarif_file: 'trivy-results.sarif'nn    - name: Run Hadolint for Dockerfile lintingn      uses: hadolint/hadolint-action@v3.1.0n      with:n        dockerfile: |n          Dockerfilen          Dockerfile.devn          Dockerfile.prodn        format: sarifn        output-file: hadolint-results.sarifnn    - name: Upload Hadolint results to GitHub Security tabn      uses: github/codeql-action/upload-sarif@v2n      if: always()n      with:n        sarif_file: 'hadolint-results.sarif'nn  docker-compose-validation:n    runs-on: ubuntu-latestn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Validate Docker Compose filesn      run: |n        docker compose -f docker-compose.yml confign        docker compose -f docker-compose.dev.yml confign        docker compose -f docker-compose.prod.yml confign        docker compose -f docker-compose.dev-with-ollama.yml confign        docker compose -f docker-compose.prod-with-ollama.yml confign        docker compose -f docker-compose.with-ollama.yml confignn  dependency-scan:n    runs-on: ubuntu-latestn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Pythonn      uses: actions/setup-python@v4n      with:n        python-version: '3.11'nn    - name: Install UVn      uses: astral-sh/setup-uv@v3nn    - name: Install dependenciesn      run: |n        uv sync --frozen --no-cache --all-extrasnn    - name: Run safety checkn      run: |n        uv run safety check --json --output safety-results.json || truenn    - name: Run pip-auditn      run: |n        uv run pip-audit --format json --output pip-audit-results.json || truenn    - name: Upload dependency scan resultsn      uses: actions/upload-artifact@v3n      if: always()n      with:n        name: dependency-scan-resultsn        path: |n          safety-results.jsonn          pip-audit-results.json